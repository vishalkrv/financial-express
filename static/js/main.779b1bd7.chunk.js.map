{"version":3,"sources":["components/Navbar.js","components/Info.js","constants.js","components/preview.js","App.js","utils/excel.js","reportWebVitals.js","index.js"],"names":["Links","NavLink","children","px","py","rounded","_hover","textDecoration","bg","useColorModeValue","href","Navbar","title","useColorMode","colorMode","toggleColorMode","h","alignItems","justifyContent","spacing","as","size","display","base","md","map","link","onClick","icon","Sun","Moon","Info","props","toast","useToast","opts","type","accept","multiple","onStart","file","reader","FileReader","readAsBinaryString","onload","e","onUpload","target","result","onError","err","console","error","status","isClosable","style","width","height","maxW","Box","textAlign","fontWeight","fontSize","sm","lineHeight","color","borderWidth","borderStyle","mt","colorScheme","my","COL_NAMES","PreviewModal","data","setData","useState","preview","setPreview","useForm","defaultValues","register","handleSubmit","onSubmit","watch","formState","errors","log","useEffect","parsedData","startIndex","cols","closeOnOverlayClick","isOpen","onClose","blockScrollOnMount","maxWidth","pb","id","defaultValue","min","direction","item","index","overflow","rows","length","i","temp","Object","keys","j","val","push","prepData","App","useDisclosure","onOpen","response","isFile","workbook","read","firstSheet","SheetNames","utils","sheet_to_row_object_array","Sheets","originalData","processFile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.779b1bd7.chunk.js","sourcesContent":["import { ReactNode } from \"react\";\nimport {\n  Box,\n  Flex,\n  HStack,\n  Link,\n  IconButton,\n  useColorMode,\n  useColorModeValue,\n  Heading,\n} from \"@chakra-ui/react\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\n\nconst Links = [\"Home\"];\n\nconst NavLink = ({ children }: { children: ReactNode }) => (\n  <Link\n    px={2}\n    py={1}\n    rounded={\"md\"}\n    _hover={{\n      textDecoration: \"none\",\n      bg: useColorModeValue(\"gray.200\", \"gray.700\"),\n    }}\n    href={\"#\"}\n  >\n    {children}\n  </Link>\n);\n\nexport default function Navbar({ title }) {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <>\n      <Box bg={useColorModeValue(\"gray.100\", \"gray.900\")} px={4}>\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <HStack spacing={8} alignItems={\"center\"}>\n            <Heading as=\"h1\" size=\"md\">\n              {title}\n            </Heading>\n            <HStack\n              as={\"nav\"}\n              spacing={4}\n              display={{ base: \"none\", md: \"flex\" }}\n            >\n              {Links.map((link) => (\n                <NavLink key={link}>{link}</NavLink>\n              ))}\n            </HStack>\n          </HStack>\n          <IconButton\n            aria-label=\"Search database\"\n            onClick={toggleColorMode}\n            icon={colorMode === \"dark\" ? <SunIcon /> : <MoonIcon />}\n          />\n        </Flex>\n      </Box>\n    </>\n  );\n}\n","import {\n  Box,\n  Heading,\n  Container,\n  Text,\n  Button,\n  Stack,\n  useToast,\n} from \"@chakra-ui/react\";\nimport Upload from \"rc-upload\";\n\nexport default function Info(props) {\n  const toast = useToast();\n  const opts = {\n    type: \"drag\",\n    accept: \".xlsx,.xls\",\n    multiple: false,\n    onStart: (file) => {\n      const reader = new FileReader();\n      if (reader.readAsBinaryString) {\n        reader.onload = (e) => {\n          props.onUpload(e.target.result);\n        };\n        reader.readAsBinaryString(file);\n      }\n    },\n    onError(err) {\n      console.error(err);\n      toast({\n        title: \"An error occurred. Please try again\",\n        status: \"error\",\n        isClosable: true,\n      });\n    },\n    style: {\n      display: \"inline-block\",\n      width: \"100%\",\n      height: \"100%\",\n    },\n  };\n\n  return (\n    <>\n      <Container maxW={\"3xl\"}>\n        <Stack\n          as={Box}\n          textAlign={\"center\"}\n          spacing={{ base: 8, md: 14 }}\n          py={{ base: 20, md: 36 }}\n        >\n          <Heading\n            fontWeight={600}\n            fontSize={{ base: \"2xl\", sm: \"4xl\", md: \"6xl\" }}\n            lineHeight={\"110%\"}\n          >\n            HDFC Bank <br />\n            <Text as={\"span\"} color={\"green.400\"}>\n              Statement Analyzer\n            </Text>\n          </Heading>\n          <Text color={\"gray.500\"}>No API used here</Text>\n          <Box borderWidth=\"3px\" borderStyle=\"dashed\">\n            <Upload {...opts}>\n              <Text mt={5} fontSize=\"lg\" color={\"gray.600\"}>\n                Drag n drop hdfc statement file\n              </Text>\n              <Button\n                colorScheme={\"green\"}\n                my={6}\n                bg={\"green.400\"}\n                rounded={\"full\"}\n                px={6}\n                _hover={{\n                  bg: \"green.500\",\n                }}\n              >\n                Upload\n              </Button>\n            </Upload>\n          </Box>\n        </Stack>\n      </Container>\n    </>\n  );\n}\n","export const TITLE = \"Financial Express\";\nexport const COL_NAMES = [\n  \"Date\",\n  \"Description\",\n  \"Cheque/Ref No\",\n  \"Transaction Date\",\n  \"Withdrawals\",\n  \"Deposits\",\n  \"Balance\",\n];\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  useColorModeValue,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Text\n} from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { COL_NAMES } from \"../constants\";\n\nexport default function PreviewModal(props) {\n  const { data, setData } = props;\n  const [preview, setPreview] = useState({});\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm({\n    defaultValues: [],\n  });\n\n  const onSubmit = (data) => {\n    console.log(\"submitted data\", data);\n  };\n\n  const onPreview = (data) => {\n    setPreview({\n      ...preview,\n      startIndex: data.startIndex,\n    });\n  };\n\n  const prepData = () => {\n    let rows = [];\n    let index = preview.startIndex - 1;\n    if (preview && preview.data && preview.data.length > 0) {\n      for (let i = index; i < index + 6; i++) {\n        let cols = [];\n        let temp = Object.keys(preview.data[i]);\n        for (let j = 0; j < 7; j++) {\n          let val = preview.data[i][temp[j]];\n          cols.push(\n            <Td maxWidth={150} key={j}>\n              {val}\n            </Td>\n          );\n        }\n        rows.push(<Tr key={i}>{cols}</Tr>);\n      }\n      return rows;\n    }\n    return rows;\n  };\n\n  useEffect(() => {\n    if (data && data.parsedData) {\n      setPreview({\n        startIndex: 18,\n        data: data.parsedData,\n        cols: COL_NAMES,\n      });\n    }\n  }, [props.data]);\n  return (\n    <>\n      <Modal\n        closeOnOverlayClick={false}\n        isOpen={props.isOpen}\n        onClose={props.onClose}\n        blockScrollOnMount={true}\n      >\n        <ModalOverlay />\n        <ModalContent maxWidth={1050}>\n          <ModalHeader>Preview</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={10}>\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl id=\"startIndex\">\n                <FormLabel>Start Row</FormLabel>\n                <Input\n                  type=\"number\"\n                  defaultValue={preview.startIndex}\n                  {...register(\"startIndex\", { min: 1 })}\n                />\n                <FormHelperText>\n                  Row no to start processing for transactions\n                </FormHelperText>\n              </FormControl>\n              <Text>Column Mapping</Text>\n              <Stack direction=\"row\" py={5} spacing={10}>\n                <Button\n                  colorScheme=\"blue\"\n                  type=\"submit\"\n                  onClick={handleSubmit(onPreview)}\n                >\n                  Preview\n                </Button>\n                <Button\n                  colorScheme=\"green\"\n                  type=\"submit\"\n                  onClick={handleSubmit(onSubmit)}\n                >\n                  Submit\n                </Button>\n              </Stack>\n            </form>\n            <Table bg={useColorModeValue(\"gray.200\", \"gray.800\")} rounded=\"md\">\n              <TableCaption>\n                Note: Preview Results limited to 6 rows only\n              </TableCaption>\n              <Thead>\n                <Tr>\n                  {preview &&\n                    preview.cols &&\n                    preview.cols.map((item, index) => (\n                      <Th key={index}>{item}</Th>\n                    ))}\n                </Tr>\n              </Thead>\n              <Tbody overflow=\"auto\" height=\"200px\">\n                {prepData()}\n              </Tbody>\n            </Table>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n","import { useDisclosure } from \"@chakra-ui/react\";\nimport Navbar from \"./components/Navbar\";\nimport Info from \"./components/Info\";\nimport { TITLE } from \"./constants\";\nimport { processFile } from \"./utils/excel\";\nimport PreviewModal from \"./components/preview\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [data, setData] = useState([]);\n\n  const postUpload = (file) => {\n    const response = processFile(file);\n    setData(response);\n    onOpen();\n  };\n\n  return (\n    <>\n      <Navbar title={TITLE}></Navbar>\n      <Info onUpload={postUpload}></Info>\n      <PreviewModal\n        onClose={onClose}\n        isOpen={isOpen}\n        data={data}\n        setData={setData}\n      ></PreviewModal>\n    </>\n  );\n}\n\nexport default App;\n","import { read, utils } from \"xlsx\";\n\nexport function processFile(data, isFile) {\n  const workbook = read(data, { type: \"binary\" });\n\n  const firstSheet = workbook.SheetNames[0];\n  const excelRows = utils.sheet_to_row_object_array(\n    workbook.Sheets[firstSheet]\n  );\n\n  return {\n    parsedData: excelRows,\n    originalData: workbook,\n  };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}